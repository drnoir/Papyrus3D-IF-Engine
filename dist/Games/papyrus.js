/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/papyrus.js":
/*!************************!*\
  !*** ./src/papyrus.js ***!
  \************************/
/***/ (() => {

eval("// main js\r\n// global game vars\r\nlet config;\r\nlet chars;\r\nlet diag;\r\nlet sceneMetadata;\r\nlet textures;\r\nlet currentDiagID = 0;\r\nlet currentScene = 1;\r\nlet currentChar = 0;\r\nlet mapSource = 0;\r\n\r\n// dialogueUI Elements\r\nconst scene = document.querySelector('a-scene');\r\nconst assets = document.querySelector('a-assets');\r\nconst dialogueUI = document.getElementById(\"dialogueID\");\r\nloadData();\r\n\r\nasync function loadData() {\r\n// game vars\r\n    await loadConfig();\r\n    await loadChars();\r\n    await loadDiag(1);\r\n    await loadMap(1);\r\n    await loadSceneMetaData(1);\r\n    await createRooms();\r\n    // await populateScene();\r\n    await populateDiag(0)\r\n    // testing dialogue.json UI population\r\n    console.log(config, chars, diag, mapSource);\r\n}\r\n\r\nasync function loadConfig() {\r\n    const res = await fetch('./Games/config.json')\r\n    config = await res.json();\r\n}\r\n\r\nasync function loadChars() {\r\n    const res = await fetch('/scenes/characters.json')\r\n    chars = await res.json();\r\n}\r\n\r\nasync function loadDiag(sceneToLoad) {\r\n    let fetchURL = './InfernoDemo/scenes/scene' + sceneToLoad + '/dialogue.json';\r\n    const res = await fetch(fetchURL)\r\n    diag = await res.json();\r\n}\r\n\r\nasync function loadMap(mapToLoad) {\r\n    let fetchURL = './InfernoDemo/scenes/scene' + mapToLoad + '/map.json';\r\n    const res = await fetch(fetchURL)\r\n    mapSource = await res.json();\r\n}\r\n\r\nasync function loadSceneMetaData(metaDataToLoad) {\r\n    let fetchURL = './InfernoDemo/scenes/scene' + metaDataToLoad + '/scene.json';\r\n    const res = await fetch(fetchURL)\r\n    sceneMetadata = await res.json();\r\n}\r\n\r\nfunction addChar(charID) {\r\n    console.log(chars.characters[charID].id, chars.characters[charID].name);\r\n    let modelRef = chars.characters[charID].id;\r\n    let modelID = '#' + modelRef;\r\n    console.log(modelRef);\r\n    let char = document.createElement('a-entity');\r\n    char.setAttribute('id', chars.characters[charID].name);\r\n    char.setAttribute('name', chars.characters[charID].name);\r\n    char.setAttribute('gltf-model', modelID);\r\n    // char.setAttribute(' glowfx', \"color:red;\");\r\n    // char.setAttribute('position', '0 -5 -5');\r\n    char.setAttribute('scale', \"3 3 3\");\r\n    char.setAttribute('animation-mixer', \"clip: *; loop: repeat;\");\r\n    return char;\r\n}\r\n// NEEDS FIX FOR POSITIONING LATER\r\nfunction addTorch(torchColor, torchIndex) {\r\n    let torch = document.createElement('a-box');\r\n    torch.setAttribute('id', torch + [torchIndex]);\r\n    let fire = document.createElement('a-entity');\r\n    fire.setAttribute('light', 'type: point; intensity: 0.75; distance: 50; decay: 2');\r\n    fire.setAttribute('color' + torchColor);\r\n    torch.appendChild(fire);\r\n    return torch;\r\n}\r\n// function to move to next scene\r\nfunction nextScene() {\r\n    if (diag.passage.length - 1 !== currentDiagID) {\r\n        currentChar = diag.passage[currentDiagID].char;\r\n        console.log(diag.passage.length - 1, currentDiagID, currentChar)\r\n        currentDiagID++;\r\n        populateDiag(currentDiagID, currentChar);\r\n        makeCharActive(currentChar);\r\n    } else {\r\n        // reset for now\r\n        currentDiagID = 0;\r\n    }\r\n}\r\n// function to clear scene\r\nfunction clearScene() {\r\n\r\n}\r\nfunction populateDiag(passageID, currentChar) {\r\n    // add button test function\r\n    addButton(currentChar);\r\n    let newPassage = diag.passage[passageID].text;\r\n    let newCharName = diag.passage[passageID].char;\r\n    currentDiagID = passageID;\r\n    dialogueUI.setAttribute('text', 'wrapCount:' + 125);\r\n    dialogueUI.setAttribute('text', 'width:' + 3, 2);\r\n    dialogueUI.setAttribute('text', 'value:' + newCharName + '\\n' + newPassage);\r\n}\r\n// make glow component show on specified char indicating char speaking\r\nfunction makeCharActive(charID) {\r\n    const charRef = document.getElementById(charID);\r\n    if (charRef.getAttribute('glowfx', 'visible:false;')) {\r\n        charRef.setAttribute('glowfx', 'visible:true;');\r\n    }\r\n}\r\n// create room function\r\nfunction createRoom(roomType, roomWidth, roomHeight, roomDepth) {\r\n    let roomArea = roomWidth * roomDepth;\r\n    switch (roomType) {\r\n        case 'indoor':\r\n            // code block\r\n            break;\r\n        case 'outdoor':\r\n            // code block\r\n            break;\r\n        default:\r\n        // code block\r\n    }\r\n}\r\nfunction createRooms() {\r\n    const mapData = mapSource.data;\r\n    console.log(mapData, mapSource.height);\r\n    let roomType = sceneMetadata.roomtype;\r\n    // char info\r\n    const chars = mapSource.chars;\r\n    const charNum = mapSource.charnumber;\r\n    let charLoopIndex = 0;\r\n\r\n    const WALL_SIZE = 5;\r\n    const WALL_HEIGHT = 15;\r\n    const el = document.getElementById('room')\r\n    // let playerPos;\r\n    let wall;\r\n    if (roomType === \"Indoor\") {\r\n        let ceil = document.createElement('a-box');\r\n        let ceilArea = (mapSource.width * mapSource.height);\r\n        ceil.setAttribute('width', ceilArea * 2);\r\n        ceil.setAttribute('height', ceilArea * 2);\r\n        ceil.setAttribute('rotation', '-90 0 0');\r\n        ceil.setAttribute('position', '0 6 0');\r\n        ceil.setAttribute('scale', '0.2 0.2 0.2');\r\n        ceil.setAttribute('material', 'src: #grunge; repeat: 1 2');\r\n        el.appendChild(ceil);\r\n    }\r\n    for (var x = 0; x < mapSource.height; x++) {\r\n        for (var y = 0; y < mapSource.width; y++) {\r\n\r\n            const i = (y * mapSource.width) + x;\r\n            const position = `${((x - (mapSource.width / 2)) * WALL_SIZE)} 0 ${(y - (mapSource.height / 2)) * WALL_SIZE}`;\r\n            const halfYposition = `${((x - (mapSource.width / 2)) * WALL_SIZE)} -3 ${(y - (mapSource.height / 2)) * WALL_SIZE}`;\r\n            const charPos = `${((x - (mapSource.width / 2)) * WALL_SIZE)} -4 ${(y - (mapSource.height / 2)) * WALL_SIZE}`;\r\n            const torchPosition = `${((x - (mapSource.width / 2)) * WALL_SIZE)} 2.5 ${(y - (mapSource.height / 2)) * WALL_SIZE / 1.2}`;\r\n            // console.log(mapData[i].charAt(0));\r\n            // char\r\n            if (typeof mapData[i] === 'string' && mapData[i].charAt(0) === \"c\" && mapData[i].charAt(1) === \"h\") {\r\n                console.log(\"its a char!\")\r\n                let char = addChar(charLoopIndex);\r\n                console.log('char ran and char is' + char)\r\n                char.setAttribute('position', charPos);\r\n                el.appendChild(char);\r\n                charLoopIndex++;\r\n            }\r\n            // add torch / light\r\n            else if (typeof mapData[i] === 'string' && mapData[i].charAt(0) === \"t\") {\r\n                console.log(\"its a torch!\")\r\n                let torch = addTorch('yellow', i);\r\n                console.log('torch ran and char is' + torch)\r\n                torch.setAttribute('position', torchPosition);\r\n                torch.setAttribute('position', torchPosition);\r\n                el.appendChild(torch);\r\n            }\r\n\r\n            // add   cam - UPDATE CONDITIONAL THIS IS TERRIBLE JSUT KEEPING IT FOR TESTING\r\n            else if (typeof mapData[i] === 'string' && mapData[i].charAt(0) === \"c\" && mapData[i].charAt(1) === \"a\") {\r\n                const camPoint = document.createElement('a-entity');\r\n                camPoint.setAttribute('id', 'cam' + [i]);\r\n                camPoint.setAttribute('position', position);\r\n                const camPointDebug = document.createElement('a-box');\r\n                camPointDebug.setAttribute('visible', false)\r\n                el.appendChild(camPoint);\r\n            }\r\n\r\n            // if the number is 1 - 4, create a wall\r\n            if (mapData[i] === 0 || mapData[i] === 1 || mapData[i] == 2 || mapData[i] === 3) {\r\n                wall = document.createElement('a-box');\r\n                wall.setAttribute('width', WALL_SIZE);\r\n                wall.setAttribute('height', WALL_HEIGHT);\r\n                wall.setAttribute('depth', WALL_SIZE);\r\n                wall.setAttribute('position', position);\r\n                console.log(el, wall)\r\n                el.appendChild(wall);\r\n\r\n                // floor\r\n                if (mapData[i] === 0) {\r\n                    // wall.setAttribute('color', '#000');\r\n                    wall.setAttribute('height', WALL_HEIGHT / 20);\r\n                    wall.setAttribute('static-body', '');\r\n                    wall.setAttribute('position', position);\r\n                    wall.setAttribute('editor-listener', '');\r\n                }\r\n\r\n                if (mapData[i] === 2) {\r\n                    // wall.setAttribute('color', '#000');\r\n                    wall.setAttribute('height', WALL_HEIGHT / 2);\r\n                    wall.setAttribute('static-body', '');\r\n                    wall.setAttribute('position', halfYposition);\r\n                }\r\n                // door\r\n                else if (mapData[i] === 3) {\r\n                    const door = document.createElement('a-box');\r\n                    door.setAttribute('id', door);\r\n                    door.setAttribute('material', 'src: #door; repeat: 1 1');\r\n                    // create component for door / lock\r\n                    door.setAttribute('locked', 'false');\r\n                } else { // normal walls\r\n                    wall.setAttribute('color', '#fff');\r\n                    wall.setAttribute('material', 'src: #brick; repeat: 1 1');\r\n                    wall.setAttribute('static-body', '');\r\n                }\r\n            }\r\n            // set player position if the number is a 2\r\n            // if (mapData === 8) {\r\n            //     playerPos = position;\r\n            // }\r\n            // if (mapData === 9) {\r\n            //     console.log(position);\r\n            // }\r\n        }\r\n    }\r\n// document.querySelector('#player').setAttribute('position', playerPos);\r\n}\r\n\r\n// UI functions - functions and actions for UI\r\nfunction populateChoiceUI() {\r\n\r\n}\r\n// show passagebtn relative to character model\r\nfunction addButton(activeChar) {\r\n    console.log('charID passed' + activeChar);\r\n    // check if there is an existing button element firsst before adding a new one\r\n    if (!document.getElementById('nextPassageBtn')) {\r\n        let nextPassageBtn = document.createElement('a-box')\r\n        nextPassageBtn.setAttribute('id', 'nextPassageBtn');\r\n        nextPassageBtn.setAttribute('cursor-listener', '');\r\n        nextPassageBtn.setAttribute('depth', '0.01');\r\n        nextPassageBtn.setAttribute('height', '0.15');\r\n        nextPassageBtn.setAttribute('width', '0.15');\r\n        nextPassageBtn.setAttribute('material', 'color: red');\r\n        nextPassageBtn.setAttribute('position', '0.2 1.6 0.1');\r\n        // addtext\r\n        let nextPassageBtnTxt = document.createElement('a-text');\r\n        nextPassageBtnTxt.setAttribute('value', '>');\r\n        nextPassageBtnTxt.setAttribute('height', '1');\r\n        nextPassageBtnTxt.setAttribute('width', '3');\r\n        nextPassageBtnTxt.setAttribute('position', '-0.05 0.015 0.1');\r\n        nextPassageBtn.appendChild(nextPassageBtnTxt);\r\n        let bobGuy = document.getElementById(activeChar) // FOR TESTING PURPOSES - needs to be passed associated char\r\n        bobGuy.appendChild(nextPassageBtn);\r\n    } else {\r\n        console.log('Opps something went wrong - There is already a passage btn on the scene')\r\n    }\r\n}\r\n\r\nfunction removeButton() {\r\n    const passageBtn = document.getElementById('nextPassageBtn');\r\n    if (passageBtn != null) {\r\n        bobGuy.removeChild(passageBtn);\r\n    }\r\n}\r\n\r\n// export {nextScene};\n\n//# sourceURL=webpack://papyrus3dengine/./src/papyrus.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/papyrus.js"]();
/******/ 	
/******/ })()
;